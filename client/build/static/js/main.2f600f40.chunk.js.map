{"version":3,"sources":["views/Chat.jsx","views/Main.js","App.js","reportWebVitals.js","index.js"],"names":["username","useState","io","socket","msg","setMsg","msgList","setMsgList","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","console","log","on","data","emit","disconnect","prevMsg","className","map","index","ref","onSubmit","e","preventDefault","type","value","onChange","target","props","name","setName","navigate","placeholder","App","setUsername","Main","path","Chat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f600f40.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport default ({ username }) => {\r\n  //Pass callback to initialize socket\r\n  const [socket] = useState(() => io(\":8000\"));\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [msgList, setMsgList] = useState([]);\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [msgList]);\r\n\r\n  useEffect(() => {\r\n    //setup event listeners in useeffect callback\r\n    console.log(\"Running\");\r\n\r\n    socket.on(\"messages\", (data) =>\r\n      setMsgList(() => {\r\n        return [...data];\r\n      })\r\n    );\r\n    socket.emit(\"new_user\", {\r\n      username,\r\n      msg: `${username} has joined!`,\r\n    });\r\n\r\n    //We are returning a callback\r\n    //This ensures that the underlying socket will be closed if App is unmounted\r\n    //This would be more critical if we were creating the socket in a subcomponent\r\n    return () => socket.disconnect(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"user_join\", (data) =>\r\n      setMsgList((prevMsg) => {\r\n        return [...prevMsg, data];\r\n      })\r\n    );\r\n    return () => socket.disconnect(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"new_message_from_server\", (data) => {\r\n      setMsgList((prevMsg) => {\r\n        return [...prevMsg, data];\r\n      });\r\n      return () => socket.disconnect(true);\r\n    });\r\n  }, []);\r\n\r\n  const sendMsg = (e) => {\r\n    e.preventDefault();\r\n\r\n    socket.emit(\"new_message_from_client\", { username, msg });\r\n\r\n    setMsg(\"\");\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"d-flex flex-column\">\r\n        {msgList &&\r\n          msgList.map((msg, index) =>\r\n            username == msg.username ? (\r\n              //Mine\r\n              <div\r\n                key={index}\r\n                className=\"border rounded bg-info w-25 mb-4 align-self-end p-2\"\r\n              >\r\n                <p className=\"font-weight-bold\">{msg.username}</p>\r\n                <p>{msg.msg}</p>\r\n              </div>\r\n            ) : (\r\n              //Not mine\r\n\r\n              <div key={index} className=\"border rounded w-25 mb-4 p-2\">\r\n                <p className=\"font-weight-bold\">{msg.username}</p>\r\n                <p>{msg.msg}</p>\r\n              </div>\r\n            )\r\n          )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <form onSubmit={sendMsg} className=\"d-flex justify-content-between mb-4\">\r\n        <input\r\n          className=\"form-control \"\r\n          type=\"text\"\r\n          value={msg}\r\n          onChange={(e) => setMsg(e.target.value)}\r\n        />\r\n        <input className=\"btn btn-primary btn-md\" type=\"submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { navigate } from \"@reach/router\";\r\n\r\nexport default (props) => {\r\n  const [name, setName] = useState();\r\n\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    props.setName(name);\r\n    navigate(\"/chatroom\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmitHandler} className=\"container w-50\">\r\n      <h3 className=\"text-center mt-4\">Get Started right now!</h3>\r\n      <div className=\"form-group mt-4\">\r\n        <label>I want to start chatting with the name...</label>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          placeholder=\"My name..\"\r\n        />\r\n      </div>\r\n      <input\r\n        className=\"btn btn-md btn-info\"\r\n        type=\"submit\"\r\n        value=\"Start Chatting\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport Chat from \"./views/Chat\";\nimport Main from \"./views/Main\";\nimport { Router } from \"@reach/router\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n\n  const updateName = (name) => {\n    setUsername(name);\n  };\n  console.log(username);\n  return (\n    <div className=\"container mt-4\">\n      <h1 className=\" text-center\">MERN Chat</h1>\n      <Router>\n        <Main path=\"/\" setName={updateName} />\n        <Chat path=\"/chatroom\" username={username} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}